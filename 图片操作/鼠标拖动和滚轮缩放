<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Canvas Image Manipulation</title>
    <style>
        html, body, #canvas {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
<canvas id="canvas"></canvas>
<script>
  const canvas = document.getElementById('canvas');
  const ctx = canvas.getContext('2d');

  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  let img = new Image();
  img.src = '../assets/people.jpg';

  let scale = 1;
  let originX = 0;
  let originY = 0;

  let startX = 0;
  let startY = 0;
  let dragging = false;

  img.onload = function() {
    drawImage();
  };

  canvas.addEventListener('mousedown', (e) => {
    startX = e.clientX - originX;
    startY = e.clientY - originY;
    dragging = true;
  });

  canvas.addEventListener('mouseup', () => {
    dragging = false;
  });

  canvas.addEventListener('mousemove', (e) => {
    if (dragging) {
      originX = e.clientX - startX;
      originY = e.clientY - startY;
      drawImage();
    }
  });

  canvas.addEventListener('wheel', (e) => {
    e.preventDefault();
    let zoom = Math.exp(e.deltaY * -0.01);
    scale *= zoom;
    originX = e.clientX - (e.clientX - originX) * zoom;
    originY = e.clientY - (e.clientY - originY) * zoom;
    drawImage();
  });

  canvas.addEventListener('touchstart', (e) => {
    if (e.touches.length === 1) {
      startX = e.touches[0].clientX - originX;
      startY = e.touches[0].clientY - originY;
      dragging = true;
    }
  });

  canvas.addEventListener('touchend', () => {
    dragging = false;
  });

  canvas.addEventListener('touchmove', (e) => {
    e.preventDefault();
    if (dragging && e.touches.length === 1) {
      originX = e.touches[0].clientX - startX;
      originY = e.touches[0].clientY - startY;
      drawImage();
    }
  });

  canvas.addEventListener('touchmove', (e) => {
    if (e.touches.length === 2) {
      let touch1 = e.touches[0];
      let touch2 = e.touches[1];

      let currentDistance = Math.hypot(touch2.clientX - touch1.clientX, touch2.clientY - touch1.clientY);
      if (lastDistance) {
        let zoom = currentDistance / lastDistance;
        scale *= zoom;
        originX = touch1.clientX - (touch1.clientX - originX) * zoom;
        originY = touch1.clientY - (touch1.clientY - originY) * zoom;
      }
      lastDistance = currentDistance;
      drawImage();
    } else {
      lastDistance = null;
    }
  });

  function drawImage() {
    ctx.setTransform(scale, 0, 0, scale, originX, originY);
    ctx.clearRect(-originX, -originY, canvas.width / scale, canvas.height / scale);
    ctx.drawImage(img, 0, 0);
  }

</script>
</body>
</html>
